// builtin function
/*
        prelude.an
    Standard functions and datatypes pre-imported
    into every Ante source file.
*/

//C functions
extern
    // varargs is not supported by the cranelift backend
    // printf: Ptr char - ... -> unit
    puts: Ptr char -> i32
    putchar: char -> unit
    getchar: unit -> char
    exit: i32 -> never_returns
    malloc: usz -> Ptr a
    calloc: /*items:*/usz - /*size:*/usz -> Ptr a
    realloc: Ptr a - usz -> Ptr a
    free: Ptr a -> unit
    memcpy: Ptr a - Ptr b - usz -> Ptr a //dest
    system: Ptr char -> i32
    strlen: Ptr char -> usz

//C stdio
type File = f: Ptr unit
type FilePos = f: Ptr unit

type InFile = f:File
type OutFile = f:File

extern
    fopen: Ptr char - Ptr char -> File
    fclose: File -> unit

    fputs: Ptr char - OutFile -> i32
    fputc: i32 - OutFile -> i32
    fwrite: Ptr u8 - usz - usz - OutFile -> usz

    fgetc: InFile -> i32
    fgets: Ptr char - i32 - InFile -> Ptr char
    ungetc: i32 - InFile -> i32

    fgetpos: File - FilePos -> unit
    ftell: File -> i32
    fsetpos: File - FilePos -> unit
    fseek: File - i32 - i32 -> i32

    feof: InFile -> i32
    ferror: File -> i32

type Some a = a: Maybe a

type None a = a: unit

type Result t e =
   | Ok t
   | Error e

impl Eq (Maybe e) given Eq e with
    (==) l r =
        match l, r
        | Some lv, Some rv -> lv == rv
        | None, None -> true
        | _ -> false

first (a, _) = a
second (_, b) = b
third (_, _, c) = c
fourth (_, _, _, d) = d
fifth (_, _, _, _, e) = e

/// A type conversion from a to b
trait Cast a b with
    cast: a -> b

impl Cast a a with
    cast a = a

impl Cast (Ptr a) usz with
    cast ptr = transmute ptr

impl Cast usz (Ptr a) with
    cast address = transmute address

impl Cast (Maybe m) string given Cast m string with
    cast maybe =
        match maybe
        | Some val -> "Some (" ++ cast val ++ ")"
        | None -> "None"

// Begin wall of casts
impl Cast u8 u16 with cast x = builtin "ZeroExtend" x
impl Cast u8 u32 with cast x = builtin "ZeroExtend" x
impl Cast u8 u64 with cast x = builtin "ZeroExtend" x
impl Cast u8 usz with cast x = builtin "ZeroExtend" x

impl Cast u16 u8  with cast x = builtin "Truncate" x
impl Cast u16 u32 with cast x = builtin "ZeroExtend" x
impl Cast u16 u64 with cast x = builtin "ZeroExtend" x
impl Cast u16 usz with cast x = builtin "ZeroExtend" x

impl Cast u32 u8  with cast x = builtin "Truncate" x
impl Cast u32 u16 with cast x = builtin "Truncate" x
impl Cast u32 u64 with cast x = builtin "ZeroExtend" x
impl Cast u32 usz with cast x = builtin "ZeroExtend" x

impl Cast u64 u8  with cast x = builtin "Truncate" x
impl Cast u64 u16 with cast x = builtin "Truncate" x
impl Cast u64 u32 with cast x = builtin "Truncate" x
impl Cast u64 usz with cast x = builtin "Truncate" x

impl Cast usz u8  with cast x = builtin "Truncate" x
impl Cast usz u16 with cast x = builtin "Truncate" x
impl Cast usz u32 with cast x = builtin "Truncate" x
impl Cast usz u64 with cast x = builtin "ZeroExtend" x

// Signed types
impl Cast i8 i16 with cast x = builtin "SignExtend" x
impl Cast i8 i32 with cast x = builtin "SignExtend" x
impl Cast i8 i64 with cast x = builtin "SignExtend" x
impl Cast i8 isz with cast x = builtin "SignExtend" x

impl Cast i16 i8  with cast x = builtin "Truncate" x
impl Cast i16 i32 with cast x = builtin "SignExtend" x
impl Cast i16 i64 with cast x = builtin "SignExtend" x
impl Cast i16 isz with cast x = builtin "SignExtend" x

impl Cast i32 i8  with cast x = builtin "Truncate" x
impl Cast i32 i16 with cast x = builtin "Truncate" x
impl Cast i32 i64 with cast x = builtin "SignExtend" x
impl Cast i32 isz with cast x = builtin "SignExtend" x

impl Cast i64 i8  with cast x = builtin "Truncate" x
impl Cast i64 i16 with cast x = builtin "Truncate" x
impl Cast i64 i32 with cast x = builtin "Truncate" x
impl Cast i64 isz with cast x = builtin "Truncate" x

impl Cast isz i8  with cast x = builtin "Truncate" x
impl Cast isz i16 with cast x = builtin "Truncate" x
impl Cast isz i32 with cast x = builtin "Truncate" x
impl Cast isz i64 with cast x = builtin "SignExtend" x

// f64 casts
impl Cast i8  f64 with cast x = builtin "SignedToFloat" x
impl Cast i16 f64 with cast x = builtin "SignedToFloat" x
impl Cast i32 f64 with cast x = builtin "SignedToFloat" x
impl Cast i64 f64 with cast x = builtin "SignedToFloat" x
impl Cast isz f64 with cast x = builtin "SignedToFloat" x

impl Cast u8  f64 with cast x = builtin "UnsignedToFloat" x
impl Cast u16 f64 with cast x = builtin "UnsignedToFloat" x
impl Cast u32 f64 with cast x = builtin "UnsignedToFloat" x
impl Cast u64 f64 with cast x = builtin "UnsignedToFloat" x
impl Cast usz f64 with cast x = builtin "UnsignedToFloat" x

impl Cast f64 i8  with cast x = builtin "FloatToSigned" x
impl Cast f64 i16 with cast x = builtin "FloatToSigned" x
impl Cast f64 i32 with cast x = builtin "FloatToSigned" x
impl Cast f64 i64 with cast x = builtin "FloatToSigned" x
impl Cast f64 isz with cast x = builtin "FloatToSigned" x

impl Cast f64 u8  with cast x = builtin "FloatToUnsigned" x
impl Cast f64 u16 with cast x = builtin "FloatToUnsigned" x
impl Cast f64 u32 with cast x = builtin "FloatToUnsigned" x
impl Cast f64 u64 with cast x = builtin "FloatToUnsigned" x
impl Cast f64 usz with cast x = builtin "FloatToUnsigned" x

impl Cast f64 f32 with cast x = builtin "FloatDemote" x

// f32
impl Cast i8  f32 with cast x = builtin "SignedToFloat" x
impl Cast i16 f32 with cast x = builtin "SignedToFloat" x
impl Cast i32 f32 with cast x = builtin "SignedToFloat" x
impl Cast i64 f32 with cast x = builtin "SignedToFloat" x
impl Cast isz f32 with cast x = builtin "SignedToFloat" x

impl Cast u8  f32 with cast x = builtin "UnsignedToFloat" x
impl Cast u16 f32 with cast x = builtin "UnsignedToFloat" x
impl Cast u32 f32 with cast x = builtin "UnsignedToFloat" x
impl Cast u64 f32 with cast x = builtin "UnsignedToFloat" x
impl Cast usz f32 with cast x = builtin "UnsignedToFloat" x

impl Cast f32 i8  with cast x = builtin "FloatToSigned" x
impl Cast f32 i16 with cast x = builtin "FloatToSigned" x
impl Cast f32 i32 with cast x = builtin "FloatToSigned" x
impl Cast f32 i64 with cast x = builtin "FloatToSigned" x
impl Cast f32 isz with cast x = builtin "FloatToSigned" x

impl Cast f32 u8  with cast x = builtin "FloatToUnsigned" x
impl Cast f32 u16 with cast x = builtin "FloatToUnsigned" x
impl Cast f32 u32 with cast x = builtin "FloatToUnsigned" x
impl Cast f32 u64 with cast x = builtin "FloatToUnsigned" x
impl Cast f32 usz with cast x = builtin "FloatToUnsigned" x

impl Cast f32 f64 with cast x = builtin "FloatPromote" x

// x -> char casts
impl Cast i8 char with cast = transmute
impl Cast i16 char with cast x = builtin "Truncate" x
impl Cast i32 char with cast x = builtin "Truncate" x
impl Cast i64 char with cast x = builtin "Truncate" x
impl Cast isz char with cast x = builtin "Truncate" x

impl Cast u8 char with cast = transmute
impl Cast u16 char with cast x = builtin "Truncate" x
impl Cast u32 char with cast x = builtin "Truncate" x
impl Cast u64 char with cast x = builtin "Truncate" x
impl Cast usz char with cast x = builtin "Truncate" x

// Other casts: TODO fill in
impl Cast i32 usz with cast x =
    // TODO: Review. Does this match C?
    transmute (cast x : isz)

impl Cast char i32 with cast x = builtin "SignExtend" x

/// Represents a failable type cast from a to b
trait TryCast a b with
    try_cast: a -> Maybe b

impl TryCast a b given Cast a b with
    try_cast a = Some (cast a)


// Huge block of builtin numeric operators incoming
trait Add n with (+): n - n -> n
impl Add t given Int t with (+) x y = builtin "AddInt" x y
impl Add f64 with (+) (x: f64) (y: f64) : f64 = builtin "AddFloat" x y
impl Add f32 with (+) (x: f32) (y: f32) : f32 = builtin "AddFloat" x y
impl Add char with (+) (x: char) (y: char) : char = builtin "AddInt" x y

trait Sub n with (-): n - n -> n
impl Sub t given Int t with (-) x y = builtin "SubInt" x y
impl Sub f64 with (-) (x: f64) (y: f64) : f64 = builtin "SubFloat" x y
impl Sub f32 with (-) (x: f32) (y: f32) : f32 = builtin "SubFloat" x y
impl Sub char with (-) (x: char) (y: char) : char = builtin "SubInt" x y

trait Mul n with (*): n - n -> n
impl Mul t given Int t with (*) x y = builtin "MulInt" x y
impl Mul f64 with (*) (x: f64) (y: f64) : f64 = builtin "MulFloat" x y
impl Mul f32 with (*) (x: f32) (y: f32) : f32 = builtin "MulFloat" x y

trait Div n with (/): n - n -> n
impl Div i8  with (/) x y = builtin "DivSigned" x y
impl Div i16 with (/) x y = builtin "DivSigned" x y
impl Div i32 with (/) x y = builtin "DivSigned" x y
impl Div i64 with (/) x y = builtin "DivSigned" x y
impl Div isz with (/) x y = builtin "DivSigned" x y
impl Div u8  with (/) x y = builtin "DivUnsigned" x y
impl Div u16 with (/) x y = builtin "DivUnsigned" x y
impl Div u32 with (/) x y = builtin "DivUnsigned" x y
impl Div u64 with (/) x y = builtin "DivUnsigned" x y
impl Div usz with (/) x y = builtin "DivUnsigned" x y
impl Div f64 with (/) (x: f64) (y: f64) : f64 = builtin "DivFloat" x y
impl Div f32 with (/) (x: f32) (y: f32) : f32 = builtin "DivFloat" x y

trait Mod n with (%): n - n -> n
impl Mod i8  with (%) x y = builtin "ModSigned" x y
impl Mod i16 with (%) x y = builtin "ModSigned" x y
impl Mod i32 with (%) x y = builtin "ModSigned" x y
impl Mod i64 with (%) x y = builtin "ModSigned" x y
impl Mod isz with (%) x y = builtin "ModSigned" x y
impl Mod u8  with (%) x y = builtin "ModUnsigned" x y
impl Mod u16 with (%) x y = builtin "ModUnsigned" x y
impl Mod u32 with (%) x y = builtin "ModUnsigned" x y
impl Mod u64 with (%) x y = builtin "ModUnsigned" x y
impl Mod usz with (%) x y = builtin "ModUnsigned" x y

// Cranelift backend does not support floating-point remainder or modulus
// impl Mod f64 with (%) (_: f64) (_: f64) : f64 = builtin "ModFloat"

trait Eq t with (==): t - t -> bool
impl Eq t given Int t with (==) x y = builtin "EqInt" x y
impl Eq f64 with (==) (x: f64) (y: f64) : bool = builtin "EqFloat" x y
impl Eq f32 with (==) (x: f32) (y: f32) : bool = builtin "EqFloat" x y

impl Eq char with (==) (x: char) (y: char) : bool = builtin "EqChar" x y
impl Eq bool with (==) (x: bool) (y: bool) : bool = builtin "EqBool" x y

(not) a = if a then false else true
(!=) l r = not (l == r)

trait Cmp a with
    (<): a - a -> bool

(>) a b = b < a
(<=) a b = not (b < a)
(>=) a b = not (a < b)

impl Cmp i8  with (<) x y = builtin "LessSigned" x y
impl Cmp i16 with (<) x y = builtin "LessSigned" x y
impl Cmp i32 with (<) x y = builtin "LessSigned" x y
impl Cmp i64 with (<) x y = builtin "LessSigned" x y
impl Cmp isz with (<) x y = builtin "LessSigned" x y

impl Cmp u8  with (<) x y = builtin "LessUnsigned" x y
impl Cmp u16 with (<) x y = builtin "LessUnsigned" x y
impl Cmp u32 with (<) x y = builtin "LessUnsigned" x y
impl Cmp u64 with (<) x y = builtin "LessUnsigned" x y
impl Cmp usz with (<) x y = builtin "LessUnsigned" x y

impl Cmp f64 with (<) x y = builtin "LessFloat" x y
impl Cmp f32 with (<) x y = builtin "LessFloat" x y

impl TryCast i64 u64 with
    try_cast x =
        if x < 0 then None
        else Some (transmute x)

impl TryCast u64 i64 with
    try_cast x =
        if x > 9_223_372_036_854_775_807 then None
        else Some (transmute x)

trait Append a with
    (++): a - a -> a

trait Extract collection index -> elem with
    (#): collection - index -> elem

impl Extract (Ptr t) usz t with
    (#) ptr index = deref_ptr <| offset ptr index


// Bitwise functions
// TODO: Move these to separate module
//       Currently this is prevented by the use of 'builtin'
//       which is limited to the prelude.

// Should these be traits instead?
band (x: t) (y: t) : t =
    // Workaround: explicit 'given' clauses on functions are unimplemented
    // currently so this will manually add the desired `Int t` restriction.
    // Alternatively we could move this to a trait and only impl for Int t
    x + 0
    builtin "BitwiseAnd" x y

bor (x: t) (y: t) : t =
    x + 0
    builtin "BitwiseOr" x y

bxor (x: t) (y: t) : t =
    x + 0
    builtin "BitwiseXor" x y

bnot (x: t) : t =
    x + 0
    builtin "BitwiseNot" x


type Type t = | MkType

size_of (v: Type t) : usz = builtin "SizeOf" v

offset (ptr: Ptr t) (index: usz) : Ptr t =
    builtin "Offset" ptr index
    // addr: usz = transmute ptr
    // new_addr = addr + index * size_of (MkType: Type t)
    // transmute new_addr

deref (x: ref t) : t =
    builtin "Deref" x

deref_ptr (p: Ptr t) : t =
    deref <| transmute p

ptr_store (p: Ptr a) (value: a) : unit =
    addr: ref a = transmute p
    addr := value

array_insert (p: Ptr a) (index: usz) (value: a) : unit =
    offset p index |> ptr_store value

ptr_to_ref: Ptr a -> ref a = transmute

(@) = deref

null (): Ptr a = transmute 0usz

transmute (x: a) : b =
    builtin "Transmute" x

// TODO: 'mut' and special-case extract versus append
// trait Insert collection index elem
//     (#): mut collection - index - elem -> unit

trait In elem col with
    (in): elem - col -> bool

// trait Deref ptr -> elem
//     deref: ptr -> elem

// TODO: Do we need a separate trait for unary '-'?
// trait Neg t
//     (-): t -> t


trait Print t with
    printne: t -> unit

print x =
    printne x
    putchar '\n'

impl Print u8  with printne x = print_unsigned (cast x)
impl Print u16 with printne x = print_unsigned (cast x)
impl Print u32 with printne x = print_unsigned (cast x)
impl Print u64 with printne x = print_unsigned x
impl Print usz with printne x = print_unsigned (cast x)

impl Print i8 with
    printne x = print_signed (cast x) -128 "-128"

impl Print i16 with
    printne x = print_signed (cast x) -32_768 "-32_768"

impl Print i32 with
    printne x = print_signed (cast x) -2_147_483_648 "-2_147_483_648"

impl Print i64 with
    printne x = print_signed x -9_223_372_036_854_775_808 "-9_223_372_036_854_775_808"

// TODO: This is broken for 32 bit platforms.
impl Print isz with
    printne x =
        print_signed (cast x) -9_223_372_036_854_775_808 "-9_223_372_036_854_775_808"


impl Print char with printne x = putchar x

impl Print f64 with printne = print_float
impl Print f32 with printne x = print_float (cast x)

// TODO: temporary, very inaccurate
print_float (f: f64) =
    if f < 0.0 then
        putchar '-'
        print_float (0.0-f)
    else
        uint = cast f
        print_unsigned uint
        putchar '.'
        f2 = f - cast uint
        // Show up to 5 decimal places
        print_unsigned (cast (f2 * 10_000.0))

impl Print string with printne s =
    print_string s

impl Print (Ptr char) with printne s = print_c_string s

impl Print (Maybe a) given Print a with
    printne m =
        match m
        | Some a -> printne a
        | None -> printne "None"

impl Print (ref a) given Print a with
    printne r = printne @r

unwrap (m: Maybe t) : t =
    match m
    | Some x -> x
    | None -> panic "Tried to unwrap a None value"

// Naive replacement for printf which isn't supported by the cranelift backend
print_unsigned (x: u64) : unit =
    if x >= 10 then print_unsigned (x / 10)
    digit: char = cast (x % 10)
    putchar (digit + '0')

print_signed (x: i64) (min: i64) (min_string: string) : unit =
    if x < 0 then
        if x == min then
            printne min_string
        else
            putchar '-'
            print_unsigned <| unwrap <| try_cast (0-x)
    else
        print_unsigned <| unwrap <| try_cast x

print_string (s: string) : unit =
    loop s (i = 0) ->
        if i < s.length then
            off = offset (s.c_string) i
            c = deref_ptr off
            putchar c
            recur s (i + 1)

print_c_string (s: Ptr char) : unit =
    loop s (i = 0) ->
        c = deref_ptr (offset s i)
        if c != '\0' then
            putchar c
            recur s (i + 1)

impl Print bool with
    printne b =
        if b then printne "true"
        else printne "false"

// TODO: This impl would conflict with others
// impl Print t given Cast t string
//     printne t = printne (t as string)


impl Cast string (Ptr char) with
    cast s = s.c_string

impl Cast int string given
  Int int, Cmp int, Eq int, Mul int, Div int, Mod int with
    cast i =
      abs, sign_off = if i < 0 then (i * -1, 1) else (i, 0)
      len = loop abs (cmp = 10) ->
        next = cmp * 10 // Here to check for overflow
        if abs >= cmp and next > cmp
        then 1 + recur abs next
        else 1

      size = len + sign_off + 1
      buf = malloc size
      if sign_off == 1
      then ptr_to_ref <| offset buf 0 := '-'
      ptr_to_ref <| offset buf (size - 1) := '\0'

      loop (pos = len - 1) (buf = offset buf sign_off) abs ->
        char_offset = builtin "Truncate" (abs % 10)
        ptr_to_ref <| offset buf pos := '0' + char_offset
        if pos > 0
        then recur (pos - 1) buf (abs / 10)

      string buf (size - 1)


// TODO: mut
// parse (s: string) -> Maybe int =
//     i = mut 0
//     sum = mut 0
//     isNeg =
//         if s.len == 0 or s.c_string#0 == '-' then false
//         else ((i += 1); true)
// 
//     while s.c_string#i != '\0' do
//         c = s.c_string#i
//         if c >= '0' and c <= '9' then
//             sum *= 10
//             sum += cast (c - '0')
//             i += 1
//             None
//         else
//             return None
// 
//     Some (if isNeg then -1 * sum else sum)

impl Eq (ref t) given Eq t with
    (==) l r = deref l == deref r

// This `given` clause is required by the current trait checker since t is generalized
impl Eq (Ptr t) given Cast (Ptr t) usz with
    (==) l r = (transmute l : usz) == transmute r


trait Iterator it -> elem with
    next: it -> Maybe (it, elem)

iter iterable f =
    match next iterable
    | None -> ()
    | Some (rest, elem) ->
        f elem
        iter rest f

type Range t = start: t, end: t

impl Iterator (Range a) a given Int a, Cmp a, Add a with
    next range =
        if range.start >= range.end
        then None
        else
            next = Range (range.start + 1) range.end
            Some (next, range.start)

iter_range (from: usz) (to: usz) f : unit =
    iter (Range from to) f

repeat (count: usz) f : unit =
    iter (Range 0 count) f

// Iterating through an InFile iterates through each line
impl Iterator InFile string with
    next infile =
        if eof infile
        then None
        else Some (infile, next_line infile)

// TODO: manually construct a string from parts
// impl Cast (ref char) string with
//     cast c_string = string c_string (cast (strlen c_string))

// impl Eq string
//     (==) l r =
//         if l.len != r.len then
//             return false
// 
//         for i in 0 .. l.len do
//             if l.c_string#i != r.c_string#i then
//                 return false
//         true

impl Append string with
    (++) s1 s2 =
        if s1.length == 0 then return s2
        if s2.length == 0 then return s1

        len = s1.length + s2.length
        buf = malloc (len + 1)

        memcpy buf (s1.c_string) (cast s1.length)

        buf_offset = cast (cast buf + s1.length)
        memcpy buf_offset (s2.c_string) (cast s2.length + 1) //copy terminating null too

        string buf len

panic msg =
    print msg
    exit 1

impl Extract string usz char with
    (#) s index = s.c_string#index

// impl Insert string int char
//     insert str index char =
//         str.c_string#index := char

open_infile (path: string) : InFile =
    InFile (fopen path.c_string "r".c_string)

open_outfile (path: string) : OutFile =
    OutFile (fopen path.c_string "w".c_string)

//Convenience function for using feof with better types
eof (f: InFile) : bool =
    feof f != 0

next_char (f: InFile) : char =
    cast (fgetc f)

// TODO: Why is this being monomorphised twice?
next_line (f: InFile) : string =
    if eof f then return ""
    eof = cast 255 : char

    capacity = mut 32
    cstr = mut malloc @capacity

    len = loop (len = 0) ->
        c = next_char f
        if c == eof then return len

        //Flag feof if eof occurs after terminating newline
        if c == '\n' then
            peek = next_char f
            if peek != eof then ungetc (cast peek) f
            return len

        if len + 1 >= @capacity then
            capacity := @capacity * 2
            cstr := realloc (@cstr) (@capacity)

        array_insert (@cstr) len c
        recur (len + 1)

    array_insert (@cstr) len '\0'
    string (@cstr) len



/// Print a message then return user input
input msg : string =
    printne msg

    buffer, len = loop (buffer = null ()) (len = 0) ->
        c = getchar ()
        buffer2 = if len % 32 == 0
            then realloc buffer (len + 32)
            else buffer

        buffer2#len := c

        if c != '\n'
        then recur buffer2 (len + 1)
        else buffer2, len

    buffer#len := '\0'
    string buffer len
