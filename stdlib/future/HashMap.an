// A linear-scan mutable HashMap using a resize factor of 2.0
type HashMap k v =
    len: usz
    capacity: usz
    entries: Ptr (Entry k v)

type Entry k v =
    key: k
    value: v
    occupied: bool
    tombstone: bool

trait Hash t with
    hash: t -> u64

empty () = HashMap 0 0 (null ())
 
clear (map: ref (HashMap k v)) : unit =
    if map.capacity != 0 then
        repeat map.capacity fn i ->
            entry = mut deref_ptr <| offset map.entries i
            entry.&occupied := false
            entry.&tombstone := false

resize (map: ref (HashMap k v)) (new_capacity: usz) : unit =
    if new_capacity > map.capacity then
        new_memory = calloc new_capacity (size_of (MkType : Type (Entry k v)))

        if new_memory == null () then
            panic "Ran out of memory while resizing HashMap"

        new_map = mut HashMap (map.len) new_capacity new_memory

        repeat (map.capacity) fn i ->
            entry: Entry k v = map.entries#i
            if entry.occupied then
                insert new_map entry.key entry.value

        map.&capacity := new_capacity
        map.&entries := new_memory

// Should we resize this map when pushing another element?
should_resize (map: HashMap k v) : bool =
    scale_factor = 2
    (map.len + 1) * scale_factor > map.capacity

insert (map: ref (HashMap k v)) (key: k) (value: v) : unit =
    if should_resize @map then
        resize map (map.capacity * 2 + 1)

    iter_until (map: ref (HashMap k v)) (key: k) (value: v) (start: usz) (end: usz) : bool =
        if start >= end then
            false
        else
            entry_ptr = offset (map.entries) start
            entry = transmute entry_ptr : ref (Entry k v)
            if entry.occupied then
                iter_until map key value (start + 1) end
            else
                entry := Entry key value true false
                true

    h = cast (hash key) : usz % map.capacity

    if not iter_until map key value h (map.capacity) then
        if not iter_until map key value 0 h then
            panic "Failed to insert entry into map"

    map.&len := map.len + 1usz

// TODO: Name resolution issue preventing this from being visible to iter_until
// if it is defined within get_entry
type EntryResult k v =
    | Found (Ptr (Entry k v))
    | NotFound
    | NotFinished

get_entry (map: HashMap k v) (key: k) : Maybe (Ptr (Entry k v)) =
    // Return whether to continue by wrapping around the end, and the value if found
    iter_until (map: HashMap k v) (key: k) (start: usz) (end: usz) : EntryResult k v =
        if start >= end then
            NotFinished
        else
            entry_ptr = offset map.entries start
            entry = deref_ptr entry_ptr
            if entry.occupied and entry.key == key then
                Found entry_ptr
            else if entry.tombstone then
                iter_until map key (start + 1) end
            else
                NotFound

    h = cast (hash key) : usz % map.capacity
    match iter_until map key h map.capacity
    | Found value -> Some value
    | NotFound -> None
    | NotFinished ->
        match iter_until map key 0 h
        | Found value -> Some value
        | _ -> None

get (map: HashMap k v) (key: k) : Maybe v =
    match get_entry map key
    | Some entry -> Some (deref_ptr entry).value
    | None -> None


remove (map: ref (HashMap k v)) (key: k) : Maybe v =
    match get_entry (@map) key
    | None -> None
    | Some e2 ->
        entry = ptr_to_ref e2
        entry.&occupied := false
        entry.&tombstone := true
        map.&len := map.len - 1
        Some entry.value

impl Print (HashMap k v) given Print k, Print v with
    printne map =
        putchar '['
        print_helper map false 0
        putchar ']'

print_helper (map: HashMap k v) (did_first: bool) (i: usz) =
    if i < map.capacity then
        entry: Entry k v = map.entries#i
        if entry.occupied then
            if did_first then
                printne ", "

            printne entry.key
            printne " -> "
            printne entry.value

        printed = did_first or entry.occupied
        print_helper map printed (i + 1)
