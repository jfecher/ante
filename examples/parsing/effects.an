
effect Log with log: String -> Unit

effect Use a with
    get: Unit -> a
    set: a - i32 -> Unit


handle log "test1"
| log s -> print s

// Test parsing of pattern matching within handle
handle log "test2"
| log "a" -> print "case 1"
| log "b" -> print "case 2"
| log _   -> print "case 3"

handle foo + bar
| set 0 a -> resume ()
| get () -> foo resume 1 // test 'resume' is parsed as a normal identifier
| set _ b -> resume ()

handle ()
| return _ -> "foo"
| log _ -> "impossible"

handle_give_int (f: Unit -> a can GiveInt) : a =
    handle f ()
    | give_int str ->
        if str == "zero"
        then resume 0
        else resume 123

handle_exception () : Unit can Throw FileError, Throw ParseError, Throw BarError =
    f = File.open "foo.txt"
    contents = parse (read f)
    bar contents

handle_exception_without_return_type () can Throw FileError, Throw ParseError, Throw BarError =
    f = File.open "foo.txt"
    contents = parse (read f)
    bar contents

// args: --parse
// expected stdout:
// (effect Log with
//     (: log (String -> Unit))
// );
// (effect Use a with
//     (: get (Unit -> a))
//     (: set (a i32 -> Unit))
// );
// (handle (log "test1") ((log _$0) 
//     (s = _$0);
//     (print s)
// ));
// (handle (log "test2") ((log _$0) (match _$0 ("a" (print "case 1")) ("b" (print "case 2")) (_ (print "case 3")))));
// (handle ('+' foo bar) ((get _$0) (match _$0 (() (foo resume 1)))) ((set _$0 _$1) (match (',' _$0 _$1) ((',' 0 a) (resume ())) ((',' _ b) (resume ())))));
// (handle () ((log _$0) 
//     (_ = _$0);
//     "impossible"
// ) ((return _$0) 
//     (_ = _$0);
//     "foo"
// ));
// (handle_give_int = (fn (: f (Unit -> a can GiveInt)) : a -> (handle (f ()) ((give_int _$0) 
//     (str = _$0);
//     (if ('==' str "zero") then (resume 0) else (resume 123))
// ))));
// (handle_exception = (fn () : Unit can (Throw FileError),(Throw ParseError),(Throw BarError) -> 
//     (f = (File.open "foo.txt"));
//     (contents = (parse (read f)));
//     (bar contents)
// ));
// (handle_exception_without_return_type = (fn () can (Throw FileError),(Throw ParseError),(Throw BarError) -> 
//     (f = (File.open "foo.txt"));
//     (contents = (parse (read f)));
//     (bar contents)
// ))
